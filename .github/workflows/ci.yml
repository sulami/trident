name: CI

on:
  push:
    branches: [ '**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy
      - name: Run tests
        run: |
          cargo test
      - name: Run clippy
        run: |
          cargo clippy -- -D warnings

  release:
    if: github.ref == 'refs/heads/master'
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Check if version has changed
        id: check_version
        run: |
          cargo install cargo-binstall
          cargo binstall cargo-metadata jaq xh
          echo "CURRENT_VERSION=$(cargo metadata --format-version=1 | jaq -r '.packages[] | select(.name == "trident") | .version')" >> $GITHUB_ENV
          echo "LATEST_RELEASE=$(xh --download https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jaq -r .tag_name)" >> $GITHUB_ENV
          if [[ "$CURRENT_VERSION" != "$LATEST_RELEASE" ]]; then echo "VERSION_CHANGED=true" >> $GITHUB_ENV; else echo "VERSION_CHANGED=false" >> $GITHUB_ENV; fi
      - name: Create Release
        if: env.VERSION_CHANGED == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        if: env.VERSION_CHANGED == 'true'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/trident
          asset_name: trident-${{ matrix.target }}
          asset_content_type: application/octet-stream